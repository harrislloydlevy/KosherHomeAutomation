substitutions:
  name: esphome-web-727d10
  friendly_name: ESPHome Web 727d10

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true

# To have a "next url" for improv serial
web_server:

i2c:
  sda: GPIO12
  scl: GPIO14

# None of these can work direclty off home assistant sensors as they're just text in the UTC timestamp format
# and zone and the ESP8277 time.h is a PITA. The strptime would randomly add daylihgt savings or not on a
# static piece of text called every 10 seconds, and there's no function to turn a struct tm into a time_t
# without doing time-zone change or funnineess.
#
# So we setup a bunch of template helpers in home assistant to reformat the times to somethign readonable for us
# Just add helper > template sensor with the state temoplate something like:
# {{as_timestamp(states('sensor.jewish_calendar_upcoming_candle_lighting','status')) | timestamp_custom('%-I:%M %p') }}
text_sensor:
  - platform: homeassistant
    name: "Jewish Date"
    entity_id: sensor.jewish_calendar_date
    id: jdate
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current is %s", x.c_str());

  - platform: homeassistant
    name: "Current Parsha"
    entity_id: sensor.jewish_calendar_parshat_hashavua
    id: parsha
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "HA: %s", x.c_str());

  - platform: homeassistant
    name: "Candle Lighting Time"
    entity_id: sensor.candle_lighting
    id: candle_lighting
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current  is %s", x.c_str());

  - platform: homeassistant
    name: "Havdallah Time"
    entity_id: sensor.havdallah_time
    id: havdallah
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current Havdallah is %s", x.c_str());

time:
  - platform: homeassistant
    timezone: "Australia/Sydney"
    id: ha_time

sensor:
  - platform: homeassistant
    name: "Total Power"
    entity_id: sensor.switch_box_shelly_channel_a_power
    id: total_power

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 10s
    lambda: |-
      it.printf(0, 0, id(mdi), "\U000F1b04"); // Synagogue
      it.printf(12, 0, id(alef), "%s", id(jdate).state.c_str());

      it.printf(0, 16, id(mdi), "\U000F140b"); // Lightning bolt
      it.printf(12, 16, id(alef), "%4.1fKw", (id(total_power).state / 1000));
      it.graph(47, 16, id(total_power_graph));

      it.printf(0, 27, id(mdi), "\U000F1CCC"); // Book
      it.printf(12, 28, id(alef), "%s", id(parsha).state.c_str());

      it.printf(0, 39, id(mdi), "\U000F05e2"); // Menorah    
      it.printf(12, 40, id(alef), "%s", id(candle_lighting).state.c_str());

      it.printf(0, 51, id(mdi), "\U000F059b"); // Sunset    
      it.printf(12, 52, id(alef), "%s", id(havdallah).state.c_str());

graph:
  # Show bare-minimum auto-ranged graph
  - id: total_power_graph
    sensor: total_power
    duration: 1h
    width: 65
    height: 13
    border: false

# Get codes from: https://pictogrammers.github.io/@mdi/font/7.4.47/
font:
  - file: "gfonts://Roboto"
    id: alef
    size: 10
  - file: "https://github.com/Templarian/MaterialDesign-Webfont/raw/master/fonts/materialdesignicons-webfont.ttf"
    id: mdi
    size: 12
    glyphs:
      - "\U000F140B" # Lightning bolt
      - "\U000F05e2" # Menorah
      - "\U000F059B" # Sunset
      - "\U000F1B04" # Synagogue
      - "\U000F097A" # Magen David
      - "\U000F1CCC" # Book
