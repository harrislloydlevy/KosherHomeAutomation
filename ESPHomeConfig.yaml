substitutions:
  name: esphome-web-727d10
  friendly_name: ESPHome Web 727d10

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true

# To have a "next url" for improv serial
web_server:

i2c:
  sda: GPIO12
  scl: GPIO14

# Example configuration entry
text_sensor:
  - platform: homeassistant
    name: "Current Parsha"
    entity_id: sensor.jewish_calendar_parshat_hashavua
    id: parsha
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current parsha is %s", x.c_str());
  - platform: homeassistant
    name: "Candle Lighting Time"
    entity_id: sensor.jewish_calendar_upcoming_candle_lighting
    id: candle_lighting
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current Candle Lighting is %s", x.c_str());


time:
  - platform: homeassistant
    timezone: "Australia/Sydney"
    id: ha_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"

sensor:
  - platform: homeassistant
    name: "Total Power"
    entity_id: sensor.switch_box_shelly_channel_a_power
    id: total_power



display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      char time_s[32];
      //setenv("TZ", "Australia/Sydney", 1);
      //tzset();
      struct tm clt_utc;
      time_t clt_tm_utc;
      struct tm clt_lcl;

      // Read candle lighting time into the struct. Reads in as raw UTC
      // Concert from struct to epoch time, doing time-zone conversion along the way
      // Now turn it back into the struct
      ESP_LOGD("main", "Doing strptime: %d", ESPTime::timezone_offset());
      strptime(id(candle_lighting).state.c_str(), "%Y-%m-%dT%H:%M:%S%z", &clt_utc);
      ESP_LOGD("main", "Doing mktime");
      clt_tm_utc = mktime(&clt_utc);
      ESP_LOGD("main", "Doing localtime");
      localtime_r(&clt_tm_utc, &clt_lcl);

      strftime(time_s, sizeof(time_s), "%H:%M%p+%Z", &clt_lcl);

      it.print(0, 0, id(alef), "Hello World!");
      it.printf(0, 10, id(alef), "P: %.2f Kw", (id(total_power).state / 1000));
      it.printf(0, 12, id(alef), "P: %s", id(parsha).state.c_str());
      it.printf(0, 14, id(alef), "C: %s", time_s);
      it.strftime(0, 36, id(alef), "T: %H:%M", id(ha_time).now());

font:
  - file: "gfonts://Alef"
    id: alef
    size: 10
